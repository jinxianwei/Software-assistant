def gaussian_derivative(image, sigma = 3):
    imd = image.astype(np.float64)
    ksize = 2 * int(3 * sigma) + 1
    # print("ksize:",ksize)
    gaussian_kernel = cv.getGaussianKernel(ksize, sigma)
    gaussian_kernel = gaussian_kernel * gaussian_kernel.T

    # Calculate the derivatives of the Gaussian kernel
    winx = gaussian_kernel[1:-1, 1:-1] - gaussian_kernel[1:-1, 2:]
    winy = gaussian_kernel[1:-1, 1:-1] - gaussian_kernel[2:, 1:-1]

    # Normalize the kernels
    winx = winx / np.abs(winx).sum()
    winy = winy / np.abs(winy).sum()

    # Apply the filters using cv2.filter2D
    grad_x = cv.filter2D(imd, -1, winx, borderType=cv.BORDER_REFLECT)
    grad_y = cv.filter2D(imd, -1, winy, borderType=cv.BORDER_REFLECT)
    grad_im = np.sqrt(grad_x ** 2 + grad_y ** 2)
    std_grad = np.std(grad_im)
    return std_grad
